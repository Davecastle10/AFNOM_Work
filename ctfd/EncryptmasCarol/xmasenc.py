from Cryptodome.Cipher import AES
twelveDays = ["a partridge in a pear tree","two turtle doves","three french hens","four calling birds","five golden rings","six geese a-laying","seven swans a-swimming","eight maids a-milking","nine ladies dancing","ten lords a-leaping","eleven pipers piping","twelve drummers drumming"]
mincePieRecipe = ["600 grams mincemeat","2 satsumas","1 apple","1 lemon","10 grams icing sugar","375 grames plain flour","260 grams unsalted butter","125 grams caster sugar","1 large egg"]
merryXmas=b'Merry Christmas & Happy New Year'
def xor_strings(str1, str2):
    return ''.join([chr(ord(str1[i%len(str1)])^ord(str2[i%len(str2)])) for i in range(max(len(str1),len(str2)))])

def rotn(input, n):# splits string at n and puts flips eig. puts after n at front and upto n at end
    #alternatively rotates the string around the point n
    return input[n:] + input[:n]

plaintext = input("Enter text to encrypt: ")
for i in twelveDays:
    plaintext = xor_strings(plaintext, i)
for i in mincePieRecipe:
    plaintext = rotn(plaintext, int(i.split(' ',1)[0]))

cipher = AES.new(merryXmas, AES.MODE_EAX)
nonce = cipher.nonce# bytes generated by AES for the encryption above to start
ciphertext, tag = cipher.encrypt_and_digest(plaintext.encode())

print((str(hex(int.from_bytes(nonce,"big")))[2:]+str(hex(int.from_bytes(tag,"big")))[2:]+str(hex(int.from_bytes(ciphertext,"big")))[2:]).upper())
# 2nd letter onwards stuff donbe of nonce, + 2nd letter onwards stuff done on tag + 2nd letter onwardss stuff done on ciphertext made uppercase
# byte order for above is big, so most significant and second most significant bits missing